// Generated by CoffeeScript 1.9.1

/*
 Backbone.BindTo

 Author: Radoslav Stankov
 Project site: https://github.com/RStankov/backbone-bind-to
 Licensed under the MIT License.
 */

(function() {
  var Backbone, BackboneView, BindToView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Backbone = window.Backbone;

  BackboneView = Backbone.View;

  BindToView = (function(superClass) {
    extend(BindToView, superClass);

    function BindToView() {
      var eventName, methodName, ref, ref1;
      BindToView.__super__.constructor.apply(this, arguments);
      if (this.model) {
        ref = this.bindToModel;
        for (eventName in ref) {
          methodName = ref[eventName];
          this.bindTo(this.model, eventName, methodName);
        }
      }
      if (this.collection) {
        ref1 = this.bindToCollection;
        for (eventName in ref1) {
          methodName = ref1[eventName];
          this.bindTo(this.collection, eventName, methodName);
        }
      }
    }

    BindToView.prototype.bindTo = function(object, eventName, methodName) {
      var callback;
      callback = typeof methodName === 'function' ? methodName : this[methodName];
      if (!callback) {
        throw new Error("Method " + methodName + " does not exists");
      }
      if (typeof callback !== 'function') {
        throw new Error(methodName + " is not a function");
      }
      if (object.on === Backbone.Events.on) {
        this.listenTo(object, eventName, callback);
      } else {
        if (this._binded == null) {
          this._binded = [];
        }
        this._binded.push(object);
        Backbone.$(object).on(eventName + ".bindToEvent", _.bind(callback, this));
      }
      return this;
    };

    BindToView.prototype.unbindFromAll = function() {
      var element, i, len, ref;
      if (this.model && this.model.off) {
        this.model.off(null, null, this);
      }
      if (this.collection && this.collection.off) {
        this.collection.off(null, null, this);
      }
      if (this._binded) {
        ref = this._binded;
        for (i = 0, len = ref.length; i < len; i++) {
          element = ref[i];
          Backbone.$(element).off('.bindToEvent');
        }
      }
      delete this._binded;
      this.stopListening();
      return this;
    };

    BindToView.prototype.remove = function() {
      this.unbindFromAll();
      return BindToView.__super__.remove.apply(this, arguments);
    };

    return BindToView;

  })(BackboneView);

  Backbone.BindTo = {
    VERSION: '1.1.0',
    noConflict: function() {
      Backbone.View = BackboneView;
      return BindToView;
    },
    View: BindToView
  };

  Backbone.View = Backbone.BindTo.View;

}).call(this);
